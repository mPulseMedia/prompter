////////////////////////////////////////////////////////////////////////////////

NOTE: This file defines all rules for naming in the project.

1. format
    a. case
        1. Use snake_case for all names
        2. Write all letters in lowercase
        3. Use underscores between terms
    b. length
        1. Keep each term under 15 letters
        2. Keep names short and clear
    c. abbreviations
        1. Use standard abbreviations to keep names short
        2. Common abbreviations:
           a. cont for container
           b. max for maximum
           c. min for minimum
        3. Always use full words if abbreviation would be unclear

2. path
    a. generation
        1. Create codename from folder path
        2. Append each folder name with underscore
        3. Ignore numbers and extensions
        4. Add type suffix (_file, _dir, _func, _var)
    b. example
        1. Path: meta/rule/command.txt
        2. Codename: meta_rule_command_file
        3. Path: app/css/style.css
        4. Codename: app_css_style_file
        5. Path: meta/rule/
        6. Codename: meta_rule_dir

3. scope
    a. apply
        1. Apply to all identifiers in the project
        2. Apply to files and directories
        3. Apply to functions and variables
        4. Apply to any named component
    b. patterns
        1. Element Types
           a. Use consistent suffixes for element types
           b. Suffix should indicate element's role or category
           c. Keep suffix short and clear
           d. Use same suffix for similar elements
        2. Action Groups
           a. Use action prefix for related variables
           b. Group variables by their action or behavior
           c. Use consistent prefixes for similar actions
           d. Keep action prefix descriptive but concise
        3. State Indicators
           a. Use state suffix for state-dependent elements
           b. State suffix should indicate current condition
           c. Use consistent suffixes for similar states
        4. Relationships
           a. Use common prefix for related elements
           b. Show hierarchy through name structure
           c. Indicate parent-child relationships
           d. Group related functionality
        5. Modifiers
           a. Use consistent suffixes for modifications
           b. Indicate type of modification
           c. Keep modifier terms short
           d. Use same modifier for similar changes
    c. codename_change_list
        1. Format:
            a. Start with "Codename Change List:"
            b. Use four spaces for indentation
            c. One identifier per line
            e. Sort identifiers alphabetically
            f. Number each identifier (01, 02, 03, etc.)
        
        2. Content:
            a. List all named identifiers after processing
            b. Always show list when:
                1. New files/directories created
                2. Existing files/directories renamed
                3. Files/directories moved
                4. Files/directories deleted
                5. New functions/variables created
                6. Functions/variables renamed
                7. Any identifier modified
                8. EXCEPT during reset command
            c. Sort identifiers alphabetically
            d. Number each identifier (01, 02, 03, etc.)
            e. Group by type (file, directory, function, variable)

//////////////////////////////////////////////////////////////////////////////// 