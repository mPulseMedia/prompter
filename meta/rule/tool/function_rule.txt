////////////////////////////////////////////////////////////////

HOW TO GENERATE FUNCTION HIERARCHY

1. FILE STRUCTURE
    a. NO JavaScript filenames as headers
    b. Functions listed directly in the outline
    c. Each function is a top-level numbered item (1., 2., 3., etc.)
    d. Blank line between major function groups if needed

2. FUNCTION STRUCTURE
    a. Function name as the main entry (e.g., "sync_updates_check")
    b. Under each function:
        - First: List all functions that CALL this function (as b>, c>, d>, etc.)
        - These should be marked with ">" to show they're references
        - Last: "z. calls" section listing functions THIS function calls
    c. Under "z. calls", indent and list the called functions

3. NUMBERING PATTERN
    a. Top-level functions: Numbers (1., 2., 3., etc.)
    b. Functions that call this function: Letters with periods (a., b., c., etc.)
    c. The "calls" section: Next letter after called-by references (e.g., if a., b., c. then use "d. calls")
    d. Functions under "calls": Numbers (1., 2., 3., etc.)
    e. Deeper nesting continues alternating letters/numbers
    f. UI BEHAVIOR: When collapsed shows periods (.), when expanded shows carets (>)

4. INDENTATION
    a. Use single tab character for each level
    b. Top-level functions (1., 2., 3.) are not indented
    c. Called-by functions (a., b.) get one tab
    d. "calls" section gets one tab
    e. Functions under "calls" get two tabs

5. GRAY COLORING AND COLLAPSING (For HTML rendering)
    a. First occurrence of a function - normal/white text with period
    b. Functions marked as references - gray text (#6e7681) and collapsed
    c. References to functions defined elsewhere start collapsed
    d. In HTML: clicking gray function expands it
    e. "calls" section is always in normal text (not gray)

6. FUNCTION REFERENCE TRACKING
    a. Track all function definitions (top-level numbered items)
    b. When listing "called by" functions (a., b.), they are references
    c. These references are shown in gray and collapsed
    d. The "calls" section shows what this function calls

7. FORMAT DETAILS
    a. For addEventListener: include event type in parentheses
    b. For forEach: include variable name in parentheses
    c. Show actual method/property names
    d. One function/method per line
    e. No comments or explanations

8. WHAT TO INCLUDE
    a. ALL custom functions from the project
    b. Entry points (server.listen, setInterval, etc.) as top-level
    c. NO built-in JavaScript methods except as entry points
    d. Include inner functions (function_executed, function_later)

9. OUTPUT
    a. Plain text format for meta/tool/function.txt
    b. Include functions from ALL JavaScript files in the project
    c. Organize by logical grouping or alphabetically
    d. Maximum 250 lines if needed

10. EXAMPLE FORMAT
    1. sync_updates_check
        a. sync_throttle_buffer
        b. layout_list_filter_apply
        c. calls
            1. fetch
            2. reload_modification_get
    
    2. sync_throttle_buffer
        a. calls
            1. clearTimeout
            2. setTimeout
            3. function_executed
    
    3. field_mode_exit
        a. layout_list_client.js
        b. layout_outline_client.js
        c. another_function
        d. calls
            1. removeAttribute
            2. classList.remove

//////////////////////////////////////////////////////////////// 