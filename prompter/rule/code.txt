////////////////////////////////////////////////////////////////////////////////

NOTE: These rules define how to format code files for readability.

• align
  • symbols
    • Look for lines with =, :, ;, => that could benefit from alignment
    • Group lines with similar patterns to create logical blocks
    • Add spaces to create clean vertical lines for better structure
    • Ensure alignment doesn't break the natural flow of code
  • scope
    • Check the entire file for alignment after each edit
    • Look at surrounding context to determine if alignment helps
    • Group lines based on their semantic meaning
    • Avoid forcing alignment when it reduces readability

• format
  • css
    • Align colons in rules to separate properties from values
    • Align values in lists to make them easier to scan
    • Align similar selectors to show their relationships
    • Keep each property on its own line for clarity
  • html
    • Align attributes within tags to show structure
    • Align closing tags with their opening tags
    • Maintain consistent indentation for hierarchy
    • Keep formatting consistent across all HTML files
  • js
    • Align variable assignments for easy comparison
    • Align function parameters to show structure
    • Align object keys to make structure visible
    • Align array items when they follow patterns

• check
  • timing
    • Review and align code after making changes
    • Check alignment before committing changes
    • Review during code reviews for issues
    • Revisit alignment when refactoring code
  • process
    • Scan for lines with similar patterns
    • Group related lines by meaning and structure
    • Add minimum spaces needed for alignment
    • Verify that alignment improves readability
  • limits
    • Don't force alignment if it makes code complex
    • Don't break natural code flow for alignment
    • Don't add complexity just for alignment
    • Don't sacrifice clarity for visual alignment

• example
  • before
    • let name = "John";
    • let age = 30;
    • let role = "admin";
  • after
    • let name  = "John";
    • let age   = 30;
    • let role  = "admin";

////////////////////////////////////////////////////////////////////////////////
